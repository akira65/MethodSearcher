[
callingMethod: spark.utils.ResourceUtils#toURI( java.net.URL )
calleeMethod: spark.utils.ResourceUtils#toURI( java.lang.String )
]
[
callingMethod: spark.Spark#webSocketIdleTimeoutMillis( int )
calleeMethod: spark.Service#webSocketIdleTimeoutMillis( long )
]
[
callingMethod: spark.route.Routes#remove( java.lang.String java.lang.String )
calleeMethod: spark.route.Routes#removeRoute( spark.route.HttpMethod java.lang.String )
]
[
callingMethod: spark.http.matching.MatcherFilter#doFilter( javax.servlet.ServletRequest javax.servlet.ServletResponse javax.servlet.FilterChain )
calleeMethod: spark.embeddedserver.jetty.HttpRequestWrapper#notConsumed( boolean )
]
[
callingMethod: spark.utils.ResourceUtils#getFile( java.net.URI )
calleeMethod: spark.utils.ResourceUtils#getFile( java.net.URI java.lang.String )
]
[
callingMethod: spark.resource.ExternalResourceHandler#getResource( java.lang.String )
calleeMethod: spark.resource.AbstractResourceHandler#addPaths( java.lang.String java.lang.String )
]
[
callingMethod: spark.embeddedserver.jetty.SocketConnectorFactory#createSocketConnector( org.eclipse.jetty.server.Server java.lang.String int boolean )
calleeMethod: spark.embeddedserver.jetty.SocketConnectorFactory#createHttpConnectionFactory( boolean )
]
[
callingMethod: spark.http.matching.GeneralError#modify( javax.servlet.http.HttpServletRequest javax.servlet.http.HttpServletResponse spark.http.matching.Body spark.http.matching.RequestWrapper spark.http.matching.ResponseWrapper spark.ExceptionMapper java.lang.Exception )
calleeMethod: spark.Response#body( )
]
[
callingMethod: spark.Routable#options( java.lang.String spark.Route )
calleeMethod: spark.Routable#createRouteImpl( java.lang.String spark.Route )
]
[
callingMethod: spark.Spark#setIpAddress( java.lang.String )
calleeMethod: spark.Service#ipAddress( java.lang.String )
]
[
callingMethod: spark.route.RouteEntry#matches( spark.route.HttpMethod java.lang.String )
calleeMethod: spark.route.RouteEntry#matchPath( java.lang.String )
]
[
callingMethod: spark.http.matching.AfterFilters#execute( spark.http.matching.RouteContext )
calleeMethod: spark.http.matching.RouteContext#uri( )
]
[
callingMethod: spark.examples.gzip.GzipExample#getAndDecompress( )
calleeMethod: spark.examples.gzip.GzipClient#getAndDecompress( java.lang.String )
]
[
callingMethod: spark.Routable#delete( java.lang.String java.lang.String spark.Route )
calleeMethod: spark.Routable#createRouteImpl( java.lang.String java.lang.String spark.Route )
]
[
callingMethod: spark.utils.StringUtils#deleteAny( java.lang.String java.lang.String )
calleeMethod: spark.utils.StringUtils#hasLength( java.lang.String )
]
[
callingMethod: spark.resource.ExternalResource#getFilename( )
calleeMethod: spark.utils.StringUtils#getFilename( java.lang.String )
]
[
callingMethod: spark.http.matching.RequestWrapper#headers( java.lang.String )
calleeMethod: spark.Request#headers( java.lang.String )
]
[
callingMethod: spark.utils.urldecoding.UrlDecode#decodeISO88591Path( java.lang.String int int )
calleeMethod: spark.utils.urldecoding.TypeUtil#convertHexDigit( char )
]
[
callingMethod: spark.route.Routes#findMultiple( spark.route.HttpMethod java.lang.String java.lang.String )
calleeMethod: spark.route.Routes#findTargetsForRequestedRoute( spark.route.HttpMethod java.lang.String )
]
[
callingMethod: spark.Service#staticFileLocation( java.lang.String )
calleeMethod: spark.staticfiles.StaticFilesConfiguration#configure( java.lang.String )
]
[
callingMethod: spark.http.matching.RequestWrapper#session( boolean )
calleeMethod: spark.Request#session( boolean )
]
[
callingMethod: spark.utils.urldecoding.Utf8Appendable#appendByte( byte )
calleeMethod: spark.utils.urldecoding.TypeUtil#toHexString( byte )
]
[
callingMethod: spark.Service#secure( java.lang.String java.lang.String java.lang.String java.lang.String boolean )
calleeMethod: spark.Service#secure( java.lang.String java.lang.String java.lang.String java.lang.String java.lang.String boolean )
]
[
callingMethod: spark.Spark#secure( java.lang.String java.lang.String java.lang.String java.lang.String java.lang.String )
calleeMethod: spark.Service#secure( java.lang.String java.lang.String java.lang.String java.lang.String java.lang.String )
]
[
callingMethod: spark.http.matching.GeneralError#modify( javax.servlet.http.HttpServletRequest javax.servlet.http.HttpServletResponse spark.http.matching.Body spark.http.matching.RequestWrapper spark.http.matching.ResponseWrapper spark.ExceptionMapper java.lang.Exception )
calleeMethod: spark.CustomErrorPages#existsFor( int )
]
[
callingMethod: spark.Request#changeMatch( spark.routematch.RouteMatch )
calleeMethod: spark.utils.SparkUtils#convertRouteToList( java.lang.String )
]
[
callingMethod: spark.route.SimpleRouteMatcher#findTargetForRequestedRoute( spark.route.HttpMethod java.lang.String java.lang.String )
calleeMethod: spark.route.Routes#find( spark.route.HttpMethod java.lang.String java.lang.String )
]
[
callingMethod: spark.Routable#createRouteImpl( java.lang.String java.lang.String spark.Route )
calleeMethod: spark.RouteImpl#create( java.lang.String java.lang.String spark.Route )
]
[
callingMethod: spark.http.matching.RequestWrapper#attribute( java.lang.String )
calleeMethod: spark.Request#attribute( java.lang.String )
]
[
callingMethod: spark.http.matching.RequestWrapper#cookie( java.lang.String )
calleeMethod: spark.Request#cookie( java.lang.String )
]
[
callingMethod: spark.utils.MimeParse#parseMediaRange( java.lang.String )
calleeMethod: spark.utils.MimeParse#isBlank( java.lang.String )
]
[
callingMethod: spark.staticfiles.MimeType#fromPathInfo( java.lang.String )
calleeMethod: spark.staticfiles.MimeType#getMimeType( java.lang.String )
]
[
callingMethod: spark.examples.multiple.MultipleServices#igniteSecondService( )
calleeMethod: spark.Service#threadPool( int )
]
[
callingMethod: spark.resource.ClassPathResource#ClassPathResource( java.lang.String java.lang.ClassLoader )
calleeMethod: spark.resource.ClassPathResource#isValid( java.lang.String )
]
[
callingMethod: spark.Request#getSplat( java.util.List java.util.List )
calleeMethod: spark.utils.SparkUtils#isSplat( java.lang.String )
]
[
callingMethod: spark.Routable#createRouteImpl( java.lang.String spark.Route )
calleeMethod: spark.RouteImpl#create( java.lang.String spark.Route )
]
[
callingMethod: spark.servlet.SparkFilter#doFilter( javax.servlet.ServletRequest javax.servlet.ServletResponse javax.servlet.FilterChain )
calleeMethod: spark.servlet.FilterTools#getRelativePath( javax.servlet.http.HttpServletRequest java.lang.String )
]
[
callingMethod: spark.utils.StringUtils#cleanPath( java.lang.String )
calleeMethod: spark.utils.StringUtils#replace( java.lang.String java.lang.String java.lang.String )
]
[
callingMethod: spark.http.matching.RequestWrapper#params( java.lang.String )
calleeMethod: spark.Request#params( java.lang.String )
]
[
callingMethod: spark.utils.ClassUtils#forName( java.lang.String java.lang.ClassLoader )
calleeMethod: spark.utils.ClassUtils#resolvePrimitiveClassName( java.lang.String )
]
[
callingMethod: spark.examples.filter.FilterExample$1#handle( spark.Request spark.Response )
calleeMethod: spark.Request#queryParams( java.lang.String )
]
[
callingMethod: spark.utils.ResourceUtils#getFile( java.net.URL )
calleeMethod: spark.utils.ResourceUtils#getFile( java.net.URL java.lang.String )
]
[
callingMethod: spark.Request#getParams( java.util.List java.util.List )
calleeMethod: spark.utils.urldecoding.UrlDecode#path( java.lang.String )
]
[
callingMethod: spark.Spark#threadPool( int int int )
calleeMethod: spark.Service#threadPool( int int int )
]
[
callingMethod: spark.embeddedserver.jetty.EmbeddedJettyServer#ignite( java.lang.String int spark.ssl.SslStores int int int )
calleeMethod: spark.embeddedserver.jetty.SocketConnectorFactory#createSocketConnector( org.eclipse.jetty.server.Server java.lang.String int boolean )
]
[
callingMethod: spark.Routable#afterAfter( java.lang.String spark.Filter )
calleeMethod: spark.FilterImpl#create( java.lang.String spark.Filter )
]
[
callingMethod: spark.resource.ClassPathResource#isValid( java.lang.String )
calleeMethod: spark.resource.ClassPathResource#isInvalidPath( java.lang.String )
]
[
callingMethod: spark.Routable#after( java.lang.String java.lang.String spark.Filter )
calleeMethod: spark.FilterImpl#create( java.lang.String java.lang.String spark.Filter )
]
[
callingMethod: spark.Spark#secure( java.lang.String java.lang.String java.lang.String java.lang.String boolean )
calleeMethod: spark.Service#secure( java.lang.String java.lang.String java.lang.String java.lang.String boolean )
]
[
callingMethod: spark.staticfiles.DirectoryTraversal#protectAgainstForExternal( java.lang.String java.lang.String )
calleeMethod: spark.staticfiles.DirectoryTraversal#unixifyPath( java.lang.String )
]
[
callingMethod: spark.route.Routes#findTargetsForRequestedRoute( spark.route.HttpMethod java.lang.String )
calleeMethod: spark.route.RouteEntry#matches( spark.route.HttpMethod java.lang.String )
]
[
callingMethod: spark.utils.urldecoding.UrlDecode#decodeISO88591Path( java.lang.String int int )
calleeMethod: spark.utils.urldecoding.TypeUtil#parseInt( java.lang.String int int int )
]
[
callingMethod: spark.http.matching.GeneralError#modify( javax.servlet.http.HttpServletRequest javax.servlet.http.HttpServletResponse spark.http.matching.Body spark.http.matching.RequestWrapper spark.http.matching.ResponseWrapper spark.ExceptionMapper java.lang.Exception )
calleeMethod: spark.CustomErrorPages#getFor( int spark.Request spark.Response )
]
[
callingMethod: spark.resource.ClassPathResource#createRelative( java.lang.String )
calleeMethod: spark.utils.StringUtils#applyRelativePath( java.lang.String java.lang.String )
]
[
callingMethod: spark.Request#queryParamsSafe( java.lang.String )
calleeMethod: spark.Base64#encode( java.lang.String )
]
[
callingMethod: spark.Service#unmap( java.lang.String java.lang.String )
calleeMethod: spark.route.Routes#remove( java.lang.String java.lang.String )
]
[
callingMethod: spark.Service#addRoute( spark.route.HttpMethod spark.RouteImpl )
calleeMethod: spark.RouteImpl#withPrefix( java.lang.String )
]
[
callingMethod: spark.Service#addFilter( spark.route.HttpMethod spark.FilterImpl )
calleeMethod: spark.FilterImpl#withPrefix( java.lang.String )
]
[
callingMethod: spark.utils.urldecoding.UrlDecode#path( java.lang.String )
calleeMethod: spark.utils.urldecoding.UrlDecode#path( java.lang.String int int )
]
[
callingMethod: spark.utils.MimeParse#fitnessAndQualityParsed( java.lang.String java.util.Collection )
calleeMethod: spark.utils.MimeParse#toFloat( java.lang.String float )
]
[
callingMethod: spark.route.SimpleRouteMatcher#findTargetsForRequestedRoute( spark.route.HttpMethod java.lang.String java.lang.String )
calleeMethod: spark.route.Routes#findMultiple( spark.route.HttpMethod java.lang.String java.lang.String )
]
[
callingMethod: spark.resource.ClassPathResource#ClassPathResource( java.lang.String java.lang.ClassLoader java.lang.Class )
calleeMethod: spark.utils.StringUtils#cleanPath( java.lang.String )
]
[
callingMethod: spark.QueryParamsMap#parseKey( java.lang.String )
calleeMethod: spark.QueryParamsMap#cleanKey( java.lang.String )
]
[
callingMethod: spark.route.Routes#findTargetWithGivenAcceptType( java.util.List java.lang.String )
calleeMethod: spark.route.Routes#routeWithGivenAcceptType( java.lang.String )
]
[
callingMethod: spark.utils.urldecoding.TypeUtil#parseInt( java.lang.String int int int )
calleeMethod: spark.utils.urldecoding.TypeUtil#convertHexDigit( int )
]
[
callingMethod: spark.http.matching.MatcherFilter#doFilter( javax.servlet.ServletRequest javax.servlet.ServletResponse javax.servlet.FilterChain )
calleeMethod: spark.http.matching.RouteContext#withAcceptType( java.lang.String )
]
[
callingMethod: spark.examples.gzip.GzipClient#getAndDecompress( java.lang.String )
calleeMethod: spark.examples.gzip.GzipClient#get( java.lang.String )
]
[
callingMethod: spark.Spark#port( )
calleeMethod: spark.Service#port( )
]
[
callingMethod: spark.examples.multiple.MultipleServices#igniteSecondService( )
calleeMethod: spark.Service#staticFileLocation( java.lang.String )
]
[
callingMethod: spark.http.matching.MatcherFilter#doFilter( javax.servlet.ServletRequest javax.servlet.ServletResponse javax.servlet.FilterChain )
calleeMethod: spark.http.matching.RouteContext#withUri( java.lang.String )
]
[
callingMethod: spark.utils.StringUtils#cleanPath( java.lang.String )
calleeMethod: spark.utils.StringUtils#collectionToDelimitedString( java.util.Collection java.lang.String )
]
[
callingMethod: spark.Request#getParams( java.util.List java.util.List )
calleeMethod: spark.utils.SparkUtils#isParam( java.lang.String )
]
[
callingMethod: spark.embeddedserver.EmbeddedServers#create( java.lang.Object spark.route.Routes spark.staticfiles.StaticFilesConfiguration boolean )
calleeMethod: spark.embeddedserver.EmbeddedServers#create( java.lang.Object spark.route.Routes spark.ExceptionMapper spark.staticfiles.StaticFilesConfiguration boolean )
]
[
callingMethod: spark.route.SimpleRouteMatcher#removeRoute( java.lang.String )
calleeMethod: spark.route.Routes#remove( java.lang.String )
]
[
callingMethod: spark.http.matching.ResponseWrapper#body( java.lang.String )
calleeMethod: spark.Response#body( java.lang.String )
]
[
callingMethod: spark.utils.urldecoding.UrlDecode#path( java.lang.String int int )
calleeMethod: spark.utils.urldecoding.UrlDecode#decodeISO88591Path( java.lang.String int int )
]
[
callingMethod: spark.Service#externalStaticFileLocation( java.lang.String )
calleeMethod: spark.staticfiles.StaticFilesConfiguration#configureExternal( java.lang.String )
]
[
callingMethod: spark.embeddedserver.jetty.EmbeddedJettyServer#ignite( java.lang.String int spark.ssl.SslStores int int int )
calleeMethod: spark.embeddedserver.jetty.SocketConnectorFactory#createSecureSocketConnector( org.eclipse.jetty.server.Server java.lang.String int spark.ssl.SslStores boolean )
]
[
callingMethod: spark.http.matching.AfterFilters#execute( spark.http.matching.RouteContext )
calleeMethod: spark.http.matching.RouteContext#acceptType( )
]
[
callingMethod: spark.Spark#unmap( java.lang.String )
calleeMethod: spark.Service#unmap( java.lang.String )
]
[
callingMethod: spark.Spark#setPort( int )
calleeMethod: spark.Service#port( int )
]
[
callingMethod: spark.staticfiles.DirectoryTraversal#protectAgainstForExternal( java.lang.String java.lang.String )
calleeMethod: spark.staticfiles.DirectoryTraversal#isPathWithinFolder( java.lang.String java.lang.String )
]
[
callingMethod: spark.resource.ExternalResourceHandler#getResource( java.lang.String )
calleeMethod: spark.resource.UriPath#canonical( java.lang.String )
]
[
callingMethod: spark.Service#secure( java.lang.String java.lang.String java.lang.String java.lang.String java.lang.String boolean )
calleeMethod: spark.ssl.SslStores#create( java.lang.String java.lang.String java.lang.String java.lang.String java.lang.String boolean )
]
[
callingMethod: spark.http.matching.RequestWrapper#queryMap( java.lang.String )
calleeMethod: spark.Request#queryMap( java.lang.String )
]
[
callingMethod: spark.Spark#setSecure( java.lang.String java.lang.String java.lang.String java.lang.String )
calleeMethod: spark.Service#secure( java.lang.String java.lang.String java.lang.String java.lang.String )
]
[
callingMethod: spark.CustomErrorPages#getFor( int spark.Request spark.Response )
calleeMethod: spark.CustomErrorPages#getDefaultFor( int )
]
[
callingMethod: spark.embeddedserver.jetty.JettyHandler#doHandle( java.lang.String org.eclipse.jetty.server.Request javax.servlet.http.HttpServletRequest javax.servlet.http.HttpServletResponse )
calleeMethod: spark.embeddedserver.jetty.HttpRequestWrapper#notConsumed( )
]
[
callingMethod: spark.utils.StringUtils#delimitedListToStringArray( java.lang.String java.lang.String java.lang.String )
calleeMethod: spark.utils.StringUtils#deleteAny( java.lang.String java.lang.String )
]
[
callingMethod: spark.utils.urldecoding.TypeUtil#toHexString( byte )
calleeMethod: spark.utils.urldecoding.TypeUtil#toHexString( byte[] int int )
]
[
callingMethod: spark.Request#body( )
calleeMethod: spark.utils.StringUtils#toString( byte[] java.lang.String )
]
[
callingMethod: spark.utils.StringUtils#collectionToDelimitedString( java.util.Collection java.lang.String )
calleeMethod: spark.utils.StringUtils#collectionToDelimitedString( java.util.Collection java.lang.String java.lang.String java.lang.String )
]
[
callingMethod: spark.route.Routes#findTargetWithGivenAcceptType( java.util.List java.lang.String )
calleeMethod: spark.utils.MimeParse#bestMatch( java.util.Collection java.lang.String )
]
[
callingMethod: spark.resource.ClassPathResource#isInvalidPath( java.lang.String )
calleeMethod: spark.utils.ResourceUtils#isUrl( java.lang.String )
]
[
callingMethod: spark.Spark#unmap( java.lang.String java.lang.String )
calleeMethod: spark.Service#unmap( java.lang.String java.lang.String )
]
[
callingMethod: spark.staticfiles.StaticFilesFolder#localConfiguredTo( java.lang.String )
calleeMethod: spark.utils.StringUtils#removeLeadingAndTrailingSlashesFrom( java.lang.String )
]
[
callingMethod: spark.Service.StaticFiles#externalLocation( java.lang.String )
calleeMethod: spark.Service#externalStaticFileLocation( java.lang.String )
]
